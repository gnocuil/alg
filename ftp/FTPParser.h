// Generated by Bisonc++ V4.05.00 on Fri, 12 Sep 2014 02:10:34 +0800

#ifndef FTPParser_h_included
#define FTPParser_h_included

// $insert baseclass
#include "FTPParserbase.h"
// $insert scanner.h
#include "FTPScanner.h"

#include "../parser.h"

#undef FTPParser
class FTPParser: public FTPParserBase, public Parser
{

    // $insert scannerobject
    FTPScanner d_scanner;
        
    public:
        FTPParser(Communicator *c)
          : Parser(c),
            c_(c) {
            d_scanner.setSval(&d_val__);
        }
        int parse();
        
        virtual void run__() {
            puts("FTP run!");
            d_scanner.switchStreams(*(c_->getIStream()));
            parse();
        }

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
        Communicator *c_;
};


#endif

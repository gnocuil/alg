%class-name HTTPParser
%scanner HTTPScanner.h
%scanner-class-name HTTPScanner
%scanner-token-function d_scanner.lex()
%baseclass-preinclude tokentype.h

%stype TokenType
%token STATUS_IDENT INTEGER HEADER_IDENT HEADER_VALUE TAG_IDENT TAG_IGNORE ATT_VALUE TAG_IDENT_HREF URL_NAME URL_IDENT
%%

httpmessage: statusline httpheaders emptyline httpbody
;
statusline: STATUS_IDENT STATUS_IDENT STATUS_IDENT '\n' {
    //std::cout << "HTTP First Line: version=" << $1 << "  code=" << $2 << " Reason=" << $3 << std::endl;
    chunked = false;
    len = 0;
}
;
httpheaders: httpheaders httpheader
    | httpheader
;
httpheader: HEADER_IDENT ':' HEADER_VALUE '\n' {
    //std::cout << " Header: [" << $1 << "]=<" << $3 << ">" << std::endl;
    if ($1.s == "Content-Length") {
        //addOperation($1.pos, $3.pos_end, Operation::REPLACE, "Transfer-Encoding: chunked");    
        //len = $3.Int();
    }
    if ($1.s == "Accept-Encoding") {
        //addOperation($3, Operation::REPLACE, "");
    }
    if ($1.s == "Transfer-Encoding") {
        if ($3.s.find(chunked) != std::string::npos) {
            //puts("http response: chunked!!!");
            chunked = true;
        }
    }
}
;
emptyline: '\n'     {
        ignore=0;
        if (chunked) {
        } else if (len > 0) {
            //puts("not chunked!");
            char buf[20] = {0};
            sprintf(buf, "%x\r\n", len);
            addOperation($1.pos_end, $1.pos_end, Operation::REPLACE, buf);
            setLengthEnd($1.pos_end, len);
            setLengthMax($1.pos_end, len);
        }
    }
;
httpbody: httpbody tag
    | 
;
tag : '<' TAG_IDENT {beginTag($2);} attributes '>'
    | '<' '/' TAG_IDENT {endTag($3);} '>'
    | '<' TAG_IGNORE
;
attributes: attributes attribute
    |
;
attribute: TAG_IDENT_HREF '=' url
    | TAG_IDENT '=' ATT_VALUE
;
url: URL_NAME ':' '/' '/' INTEGER '.' INTEGER '.' INTEGER '.' INTEGER '/' {
        reportIP(($5 + "." + $7 + "." + $9 + "." + $11).s, $5.pos, $11.pos_end);
    } url_trailing
    | error
;
url_trailing :
    | url_trailing URL_IDENT
    | url_trailing INTEGER
    | url_trailing '/'
    | url_trailing '.'
;

